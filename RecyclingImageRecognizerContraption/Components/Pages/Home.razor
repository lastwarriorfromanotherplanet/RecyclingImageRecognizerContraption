@page "/"

@inject IJSRuntime JS
@inject LaPorteService LaPorteService

@using Microsoft.EntityFrameworkCore
@using RecyclingImageRecognizerContraption.Resources.Models
@using RecyclingImageRecognizerContraption.Resources.DatabaseService
@using RecyclingImageRecognizerContraption.Components.Layout;
@using RecyclingImageRecognizerContraption.Resources.AWS_Connector;

<h1>Recycling Recognition App</h1>

<p>@status</p>

<NavMenu OnTakePhoto="TakePhoto" OnShowFilePicker="LoadCategories" />

@* <button @onclick="NavigateToCategorySearch">View Categories</button> *@

@code {
    private string? imagePath;
    private string? status;
    private List<LaPorte> items = new();

    protected override async Task OnInitializedAsync()
    {
        items = await LaPorteService.GetItemsAsync();

        if (items.Count == 0)
        {
            var dbSeeder = new AddDatabase(LaPorteService);
            await dbSeeder.FillDatabase();
            items = await LaPorteService.GetItemsAsync();
            status = "Database initialized with sample data!";
        }
        else
        {
            status = $"Loaded {items.Count} item(s) from the database.";
        }
    }

    private async Task TakePhoto()
    {
        var photo = await MediaPicker.CapturePhotoAsync();
        if (photo != null)
        {
            var stream = await photo.OpenReadAsync();
            var filePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

            using (var fileStream = File.OpenWrite(filePath))
            {
                await stream.CopyToAsync(fileStream);
            } 


            imagePath = filePath;
            status = $"Took photo: {photo.FileName}";


            var extension = Path.GetExtension(photo.FileName)?.ToLower(); // jpg or png checker

            status = $"Took photo: {photo.FileName} | Format: {extension} | Path: {filePath}";


            ImageUploader imageUploader = new();
            try
            {
                var result = await imageUploader.SendImageAsync(imagePath);
                status += $" | Server response: {result}";
            }
            catch (Exception ex)
            {
                status += $" | Upload failed: {ex.Message}";
            }

        }
    }

   

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private void NavigateToCategorySearch()
    {
        NavigationManager.NavigateTo("/CategorySearch");
    }




    private List<string?> categoryList = new();

    private async Task LoadCategories()
    {
        var dbPath = Path.Combine(FileSystem.AppDataDirectory, "LaPorte.db3");
        var service = new LaPorteService(dbPath); 
        categoryList = await service.GetUniqueCategoriesAsync();

        if (categoryList.Count == 0)
            status = "No categories found.";
        else
            status = "Categories loaded.";
    }

    private async Task HandleCategoryClick(string? category)
    {
        status = $"You clicked on {category}";
        await Task.CompletedTask; 
    }




}
