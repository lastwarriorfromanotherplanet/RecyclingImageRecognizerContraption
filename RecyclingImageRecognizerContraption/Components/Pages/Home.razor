@page "/"

@inject IJSRuntime JS
@inject LaPorteService LaPorteService

@using Microsoft.EntityFrameworkCore
@using RecyclingImageRecognizerContraption.Resources.Models
@using RecyclingImageRecognizerContraption.Resources.DatabaseService
@using RecyclingImageRecognizerContraption.Components.Layout;
@using RecyclingImageRecognizerContraption.Resources.AWS_Connector;
@using Microsoft.Maui.Storage;
@using System.Text.Json
@using System.Text;



<style>
    
    .app-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        overflow: hidden;
    }

    .app-header {
        text-align: center;
        padding: 1rem;
        background-color: #f0f0f0;
        font-size: 1.8rem;
        font-weight: bold;
        flex-shrink: 0; /* prevent header from shrinking */
    }



    html, body{
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }
</style>

<div class="app-container">
    <div class="app-header"> Recycling Recognition App</div>

    <div class="status-text">@status</div>

    @if (isLoading)
{
        @if (isLoading)
        {
            <div class="loading-message">
                <p>Analyzing image<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span></p>
            </div>
        }

}

    <!-- <button @onclick="PickFileFromDevice">Choose Photo From Device</button> -->


    <NavMenu OnTakePhoto="TakePhoto" OnShowFilePicker="LoadCategories" />
</div>


@* <button @onclick="NavigateToCategorySearch">View Categories</button> *@

@code {
    private string? predictionString;
    private bool isLoading = false;

    private string? imagePath;
    private string? status;
    private List<LaPorte> items = new();

    protected override async Task OnInitializedAsync()
    {
        items = await LaPorteService.GetItemsAsync();

        if (items.Count == 0)
        {
            var dbSeeder = new AddDatabase(LaPorteService);
            await dbSeeder.FillDatabase();
            items = await LaPorteService.GetItemsAsync();
            status = "Database initialized with sample data!";
        }
        else
        {
            status = "";/* $"Loaded {items.Count} item(s) from the database."; */
        }
    }

    


    




    private async Task TakePhoto()
    {
        var photo = await MediaPicker.CapturePhotoAsync();
        if (photo != null)
        {
            var stream = await photo.OpenReadAsync();
            var filePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

            using (var fileStream = File.OpenWrite(filePath))
            {
                await stream.CopyToAsync(fileStream);
            } 


            imagePath = filePath;
            status = $"Took photo: {photo.FileName}";


            var extension = Path.GetExtension(photo.FileName)?.ToLower(); // jpg or png checker

            //status = $"Took photo: {photo.FileName} | Format: {extension} | Path: {filePath}";


            ImageUploader imageUploader = new();
            try
            {
                var result = await imageUploader.SendImageAsync(imagePath);
                var encodedResult = Uri.EscapeDataString(result); // to safely pass JSON
                NavigationManager.NavigateTo($"/LoadingPage/{encodedResult}");
            }
            catch (Exception ex)
            {
                status += $" | Upload failed: {ex.Message}";
            }

        }


    }

   

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private void NavigateToCategorySearch()
    {
        NavigationManager.NavigateTo("/CategorySearch");
    }




    private List<string?> categoryList = new();

    private async Task LoadCategories()
    {
        var dbPath = Path.Combine(FileSystem.AppDataDirectory, "LaPorte.db3");
        var service = new LaPorteService(dbPath); 
        categoryList = await service.GetUniqueCategoriesAsync();

        if (categoryList.Count == 0)
            status = "No categories found.";
        else
            status = "Categories loaded.";
    }

    private async Task HandleCategoryClick(string? category)
    {
        status = $"You clicked on {category}";
        await Task.CompletedTask; 
    }

    public class PredictionResponse
    {
        public string? Prediction { get; set; }
    }



}
