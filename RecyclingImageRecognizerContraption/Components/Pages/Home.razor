@page "/"

@inject IJSRuntime JS
@inject LaPorteService LaPorteService

@using Microsoft.EntityFrameworkCore
@using RecyclingImageRecognizerContraption.Resources.Models
@using RecyclingImageRecognizerContraption.Resources.DatabaseService
@using RecyclingImageRecognizerContraption.Components.Layout;

<h1>Recycling Recognition App</h1>

<p>@status</p>

@if (items?.Any() == true)
{
    <ul>
        @foreach (var item in items)
        {
            <li>@item.Name - @item.Category (@(item.IsRecyclable ? "♻️" : "🚫"))</li>
        }
    </ul>
}

<NavMenu OnTakePhoto="TakePhoto" OnShowFilePicker="ShowFilePicker" />

@code {
    private string? imagePath;
    private string? status;
    private List<LaPorte> items = new();

    protected override async Task OnInitializedAsync()
    {
        items = await LaPorteService.GetItemsAsync();

        if (items.Count == 0)
        {
            var dbSeeder = new AddDatabase(LaPorteService);
            await dbSeeder.FillDatabase();
            items = await LaPorteService.GetItemsAsync();
            status = "Database initialized with sample data!";
        }
        else
        {
            status = $"Loaded {items.Count} item(s) from the database.";
        }
    }

    private async Task TakePhoto()
    {
        var photo = await MediaPicker.CapturePhotoAsync();
        if (photo != null)
        {
            var stream = await photo.OpenReadAsync();
            var filePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

            using var fileStream = File.OpenWrite(filePath);
            await stream.CopyToAsync(fileStream);

            imagePath = filePath;
            status = $"Took photo: {photo.FileName}";
        }
    }

    private async Task ShowFilePicker()
    {
        var result = await FilePicker.PickAsync();
        if (result != null)
        {
            var stream = await result.OpenReadAsync();
            var filePath = Path.Combine(FileSystem.CacheDirectory, result.FileName);

            using var fileStream = File.OpenWrite(filePath);
            await stream.CopyToAsync(fileStream);

            imagePath = filePath;
            status = $"Picked file: {result.FileName}";
        }
    }
}
