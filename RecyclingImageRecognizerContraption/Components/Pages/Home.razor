@page "/"

@inject IJSRuntime JS
@inject LaPorteService LaPorteService

@using Microsoft.EntityFrameworkCore
@using RecyclingImageRecognizerContraption.Resources.Models
@using RecyclingImageRecognizerContraption.Resources.DatabaseService
@using RecyclingImageRecognizerContraption.Components.Layout;
@using RecyclingImageRecognizerContraption.Resources.AWS_Connector;
@using Microsoft.Maui.Storage;
@using System.Text.Json
@using System.Text;



<style>
    /* Global settings */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #2c2f33; /* Dark grey background for the entire page */
        color: white; /* White text color for contrast */
    }

    /* App container to hold everything */
    .app-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        overflow: hidden;
        background-color: #2c2f33; /* Dark grey background for the app container */
    }

    /* Header */
    .app-header {
        text-align: center;
        padding: 1rem;
        background-color: #f0f0f0; /* Lighter background for the header */
        font-size: 1.8rem;
        font-weight: bold;
        flex-shrink: 0;
        color: #333; /* Dark text for the header */
    }

    /* Main content styling */
    .main-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start; /* Center vertically within the available space */
        flex: 1;
        width: 100%;
        background-color: #2c2f33; /* Ensure background color is consistent */
        padding: 2rem;
    }

    /* Button container */
    .button-container {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
        background-color: #2c2f33; /* Grey background for the button container */
        padding: 1rem;
        width: 100%; /* Ensure it takes up full width */
    }

        /* Button styles */
        button, .button-container button {
            background-color: #28a745; /* Bright green */
            color: white; /* White text */
            border: none;
            padding: 1rem 2rem;
            font-size: 1rem;
            cursor: pointer;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }

            /* Button hover effect */
            button:hover, .button-container button:hover {
                background-color: #218838; /* Darker green when hovered */
            }

    /* Status text */
    .status-text {
        margin-bottom: 1rem;
    }

    /* Loading text */
    .loading-message p {
        font-size: 1.2rem;
    }
</style>

<div class="app-container">
    <div class="app-header">Recycling Recognition App</div>

    <div class="main-content">
        <div class="status-text">@status</div>

        @if (isLoading)
        {
            <div class="loading-message">
                <p>Analyzing image<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span></p>
            </div>
        }

        <div class="button-container">
            <NavMenu OnTakePhoto="TakePhoto" OnShowFilePicker="LoadCategories" />
        </div>
    </div>
</div>


@* <button @onclick="NavigateToCategorySearch">View Categories</button> *@

@code {
    private string? predictionString;
    private bool isLoading = false;

    private string? imagePath;
    private string? status;
    private List<LaPorte> items = new();

    protected override async Task OnInitializedAsync()
    {
        items = await LaPorteService.GetItemsAsync();

        if (items.Count == 0)
        {
            var dbSeeder = new AddDatabase(LaPorteService);
            await dbSeeder.FillDatabase();
            items = await LaPorteService.GetItemsAsync();
            status = "Database initialized with sample data!";
        }
        else
        {
            status = "";/* $"Loaded {items.Count} item(s) from the database."; */
        }
    }

    private async Task TakePhoto()
    {
        var photo = await MediaPicker.CapturePhotoAsync();
        if (photo != null)
        {
            var stream = await photo.OpenReadAsync();
            var filePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

            using (var fileStream = File.OpenWrite(filePath))
            {
                await stream.CopyToAsync(fileStream);
            }


            imagePath = filePath;
            status = $"Took photo: {photo.FileName}";


            var extension = Path.GetExtension(photo.FileName)?.ToLower(); // jpg or png checker

            //status = $"Took photo: {photo.FileName} | Format: {extension} | Path: {filePath}";


            ImageUploader imageUploader = new();
            try
            {
                var result = await imageUploader.SendImageAsync(imagePath);
                var encodedResult = Uri.EscapeDataString(result); // to safely pass JSON
                NavigationManager.NavigateTo($"/LoadingPage/{encodedResult}");
            }
            catch (Exception ex)
            {
                status += $" | Upload failed: {ex.Message}";
            }

        }


    }


    [Inject]
    NavigationManager NavigationManager { get; set; }

    private void NavigateToCategorySearch()
    {
        NavigationManager.NavigateTo("/CategorySearch");
    }

    private List<string?> categoryList = new();

    private async Task LoadCategories()
    {
        var dbPath = Path.Combine(FileSystem.AppDataDirectory, "LaPorte.db3");
        var service = new LaPorteService(dbPath);
        categoryList = await service.GetUniqueCategoriesAsync();

        if (categoryList.Count == 0)
            status = "No categories found.";
        else
            status = "Categories loaded.";
    }

    private async Task HandleCategoryClick(string? category)
    {
        status = $"You clicked on {category}";
        await Task.CompletedTask;
    }

    public class PredictionResponse
    {
        public string? Prediction { get; set; }
    }

}